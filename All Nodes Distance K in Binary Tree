/*********************
Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
********************/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    HashMap<TreeNode,TreeNode> parent = new HashMap<>();
    void preorder(TreeNode curr,TreeNode par){
        if(curr==null)return ;
        parent.put(curr,par);
        if(curr.left!=null)preorder(curr.left,curr);
        if(curr.right!=null)preorder(curr.right,curr);
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        preorder(root,null);
        Queue<TreeNode> q = new LinkedList<>();
        q.add(target);
        HashSet<TreeNode> set = new HashSet<>();
        set.add(target);
        int level = 0;
        while (!q.isEmpty() && level < k) {
        int size = q.size();
        for (int i = 0; i < size; i++) {
            TreeNode temp = q.poll();
            if (temp != null) {
                if (temp.left != null && !set.contains(temp.left)) {
                    set.add(temp.left);
                    q.add(temp.left);
                }
                if (temp.right != null && !set.contains(temp.right)) {
                    set.add(temp.right);
                    q.add(temp.right);
                }
                TreeNode parentNode = parent.get(temp);
                if (parentNode != null && !set.contains(parentNode)) {
                    set.add(parentNode);
                    q.add(parentNode);
                }
            }
        }
        level++;
}

        List<Integer> ans = new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode temp = q.poll();
            ans.add(temp.val);
        }
        return ans;
    }
}
